/********************************************************************************
 * Description :
 * -----------
 *  Ce fichier g√®re la commande /addfail sur Discord. Cette commande permet
 *  d'ajouter un ou plusieurs √©checs (jusqu'√† 2 maximum) √† un utilisateur,
 *  d'enregistrer ces √©checs dans la base de donn√©es, de g√©rer les "milestones"
 *  d'√©checs (messages sp√©ciaux √† certains paliers), et de poster un message
 *  dans le salon configur√© √† cet effet.
 * 
 * 1. R√©cup√®re le nom et le nombre d'√©checs √† ajouter depuis l'interaction.
 * 2. V√©rifie la validit√© du contexte (serveur, canal configur√©, etc.).
 * 3. Met √† jour les donn√©es de l'utilisateur en base ou cr√©e un nouvel enregistrement.
 * 4. G√®re l'affichage des "milestones" si un palier d'√©checs est atteint.
 * 5. Envoie un message dans le canal configur√© (et un accus√© dans le canal de la commande).
 ********************************************************************************/

import { CommandInteraction, CommandInteractionOptionResolver, ChannelType, TextChannel, EmbedBuilder } from 'discord.js';
import { User } from '../../database/models';
import { milestones } from '../../utils/milestonesMessages';
import { ChannelConfigManager } from '../../utils/ChannelConfigManager';
import logger from '../../utils/logger'; // Import du logger Winston
import { Op, Sequelize } from 'sequelize';

const channelManager = new ChannelConfigManager();

// Constante : message d'erreur g√©n√©rique
const ERROR_MESSAGE = 'Erreur lors de l\'ajout de l\'√©chec.';

// Fonction : G√©n√®re un message de succ√®s personnalis√© en fonction du nom d'utilisateur et du nombre d'√©checs total
const SUCCESS_MESSAGE = (userName: string, nbFail: number) =>
  `${userName} a maintenant ${nbFail} √©checs.`;

/**
 * Ajoute un ou plusieurs √©checs √† un utilisateur (jusqu'√† 2 maximum).
 * 
 * @param {CommandInteraction} interaction - L'interaction Discord qui d√©clenche la commande /addfail.
 * 
 * Workflow de la fonction :
 * 1. Extraction des options (nom d'utilisateur, nombre d'√©checs).
 * 2. Validation du contexte (commande lanc√©e en serveur, canal configur√©, etc.).
 * 3. Recherche ou cr√©ation de l'utilisateur cibl√© dans la base de donn√©es.
 * 4. Incr√©ment du nombre d'√©checs et enregistrement.
 * 5. V√©rification des milestones atteints et pr√©paration du message Embed.
 * 6. Envoi du message Embed dans le canal configur√© et confirmation (√©phemeral) dans le canal d'origine.
 */
export const addFail = async (interaction: CommandInteraction): Promise<void> => {
  // --- 1. Extraction des options de la commande ---
  const userName = (interaction.options as CommandInteractionOptionResolver).getString('name', true);
  const failCount = (interaction.options as CommandInteractionOptionResolver).getInteger('amount') || 1;

  // S√©parateur visuel dans les logs pour chaque commande
  logger.info('-----------------------------------------------');
  logger.info(`Commande /addfail re√ßue - User: ${interaction.user.tag}, Guild: ${interaction.guild?.name || 'DM'}, Target: ${userName}, FailCount: ${failCount}`);

  // V√©rification du nombre d'√©checs saisi (entre 1 et 2 inclus)
  if (failCount < 1 || failCount > 2) {
    logger.warn(`Validation √©chou√©e - Nombre d'√©checs non valide. User: ${userName}, FailCount: ${failCount}`);
    await interaction.reply({ content: 'Le nombre d\'√©checs doit √™tre entre 1 et 2.', ephemeral: true });
    return;
  }

  // --- 2. Validation du contexte ---
  const guildId = interaction.guildId;
  if (!guildId) {
    // La commande n'est pas ex√©cut√©e dans un serveur
    logger.warn(`Commande ex√©cut√©e en dehors d'un serveur - User: ${userName}`);
    await interaction.reply({ content: 'Cette commande doit √™tre ex√©cut√©e dans un serveur.', ephemeral: true });
    return;
  }

  // R√©cup√©ration du canal configur√© pour ce serveur
  const channelId = channelManager.getChannelIdForGuild(guildId);

  if (!channelId) {
    // Aucun canal n'a √©t√© configur√© via la commande /startup
    logger.warn(`Aucun canal configur√© - GuildID: ${guildId}`);
    await interaction.reply({
      content: "Aucun canal configur√© pour ce serveur. Veuillez utiliser la commande `/startup` pour en configurer un.",
      ephemeral: true,
    });
    return;
  }

  // V√©rification que le canal configur√© est un salon textuel valide
  const targetChannel = interaction.guild?.channels.cache.get(channelId) as TextChannel;
  if (!targetChannel || targetChannel.type !== ChannelType.GuildText) {
    // Le canal configur√© n'existe plus ou n'est pas de type textuel
    logger.error(`Canal invalide ou inaccessible - ChannelID: ${channelId}, GuildID: ${guildId}`);
    await interaction.reply({
      content: "Le canal configur√© n'est pas valide ou n'est pas accessible.",
      ephemeral: true,
    });
    return;
  }

  try {
    // --- 3. Recherche ou cr√©ation de l'utilisateur dans la base ---
    logger.info(`Recherche ou cr√©ation de l'utilisateur - User: ${userName}, GuildID: ${guildId}`);
    const [user, created] = await User.findOrCreate({
      where: {
        guildId,
        [Op.and]: [
          Sequelize.where(
            Sequelize.fn('LOWER', Sequelize.col('name')),
            userName.toLowerCase()
          ),
        ],
      },
      defaults: {
        name: userName, // On force le champ "name" pour √©viter un NOT NULL
        nb_fail: 0,
      },
    });

    // On loggue si l'utilisateur vient d'√™tre cr√©√© ou s'il existait d√©j√†
    if (created) {
      logger.info(`Nouvel utilisateur cr√©√© - User: ${userName}, GuildID: ${guildId}`);
    } else {
      logger.info(`Utilisateur existant trouv√© - User: ${userName}, GuildID: ${guildId}, CurrentFails: ${user.nb_fail}`);
    }

    // --- 4. Incr√©ment du nombre d'√©checs ---
    const oldNbFail = user.nb_fail;
    user.nb_fail += failCount;

    logger.info(`Mise √† jour des √©checs - User: ${userName}, OldFails: ${oldNbFail}, NewFails: ${user.nb_fail}, AddedFails: ${failCount}, GuildID: ${guildId}`);

    // Sauvegarde en base
    await user.save();

    // --- 5. V√©rification des milestones ---
    /**
     * On identifie la liste des milestones atteints
     * (ceux qui se situent entre l'ancienne valeur (exclusive) et la nouvelle (inclusive)).
     */
    const milestonesReached = Object.keys(milestones)
      .map(Number)
      .filter((milestone) => milestone > oldNbFail && milestone <= user.nb_fail)
      .sort((a, b) => a - b);

    if (milestonesReached.length > 0) {
      logger.info(`Milestones atteintes - User: ${userName}, Milestones: ${milestonesReached.join(', ')}`);
    }

    // Pr√©paration du message d√©di√© aux milestones atteints
    const milestoneMessages = milestonesReached.map(
      (milestone) => `**${user.nb_fail} √âchecs** üéâ - ${milestones[milestone]}`
    ).join('\n');

    // Construction de la r√©ponse finale √† afficher
    const response = milestoneMessages
      ? `${SUCCESS_MESSAGE(user.name, user.nb_fail)}\n\n${milestoneMessages}`
      : SUCCESS_MESSAGE(user.name, user.nb_fail);

    // Cr√©ation d'un Embed styl√© pour l'affichage des informations
    const embed = new EmbedBuilder()
      .setColor('#FF0000')
      .setDescription(response)
      .setFooter({
        text: `Commande ex√©cut√©e par ${interaction.user.displayName} ‚Ä¢ /addfail`,
        iconURL: interaction.user.displayAvatarURL(),
      });

    // --- 6. Envoi du message dans le canal configur√© ---
    await targetChannel.send({ embeds: [embed] });

    // Si le canal courant n'est pas le m√™me que le canal configur√©, on envoie un accus√© de r√©ception dans le canal d'origine
    if (interaction.channelId !== targetChannel.id) {
      await interaction.reply({
        content: `Les √©checs ont √©t√© ajout√©s pour ${userName} et le message a √©t√© envoy√© dans ${targetChannel.name}.`,
        ephemeral: true,
      });
    } else {
      await interaction.reply({
        content: `Les √©checs ont √©t√© ajout√©s pour ${userName}.`,
        ephemeral: true,
      });
    }

    logger.info(`Commande ex√©cut√©e avec succ√®s - User: ${userName}, NewFails: ${user.nb_fail}, TargetChannel: ${targetChannel.name}, GuildID: ${guildId}`);
    logger.info('-----------------------------------------------');
  } catch (error) {
    /**
     * En cas d'erreur lors de la mise √† jour ou de la cr√©ation
     * (par exemple un probl√®me de base de donn√©es),
     * on log l'erreur et on envoie un message d'erreur √©phemeral √† l'utilisateur.
     */
    const errorMessage = (error as Error).message;
    logger.error(`Erreur lors du traitement de la commande /addfail - Error: ${errorMessage}, User: ${userName}, GuildID: ${guildId}`);
    logger.info('-----------------------------------------------');
    await interaction.reply({ content: ERROR_MESSAGE, ephemeral: true });
  }
};
